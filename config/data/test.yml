###########   Test1  ####################
#
# only one test per *.yml or *.yaml  !!!
#
####################################


- Action:
    # the name for the action
    Name: Poster-Homepage
    
    # the request details
	Request:
        Url: "${host}/posters/"
        Type: GET   # GET and POST for now only
        Encoded: false
        
        #Xhr: false  #true|false
        
        # the params for the request as key value pairs
        # this is a list, hence ordering applies
        Parameters:
            - aValue: ${RANDOM.Number(10)}
            - cgid: "123-181"

    # the response validation
    Response:
        # expect these response code
        Httpcode: 200
        
        # verify
        Validate:
            # this is a list, hence the verification takes place in that order
            # each verification step has a name to print it out when the step fails, 
            # makes debugging easier
            - Header:
                # xpath only works for DOM mode
                Xpath: id('titleIndex')
                Matches: Check out our new panorama posters!   
            - MainElements:
                # checks the count of elements
                Xpath: id('main')/div/div
                Count: 2
            - Carousel:
                # if nothing is specified, it just checks that the path exists
                Xpath: id('carousel')[@class='carousel slide']
            #- Footer:
                # regexp works for both modes
                #Regex: F.*-Tool
                #Matches: Foobar-Tool
            - End:
                # compare against a capture group, only the first group is used
                Regex: <div id="main"(.*)</div>
                Matches: Check out our new panorama posters!
                
        #store:
            # storing means putting stuff into variables for later reference down the road
            # this can be subrequests or follow up activities
            #- basketCount:
                # stores the text of the element in basketCount, this is the only
                # mode supported in the first version
                #xpath: //div[@class='cart']/span
            #- end:
                # takes the stuff from the first capturing group and stores it in "end"
                #regexp: <div class="foo">(.*)</div>
               
    subrequests: 
        # static urls for everything really static, can use variables stored in the request above
        - static:
            - http://${host}/foo.jpg
            - http://${host}/foo2.jpg
            - http://${host}/foobar.css
        # an Ajax request, same syntax than the Action aka request, response, validate, store, but cannot have
        # further subrequests (for now)    
        #- XHR:
            #name: MiniCart
            #request:
                #url: "http://${host}/minicart"
                #type: GET
                #encoded: false
            #params:
                #time: ${NOW}
            #response:
                #httpcode: 200
                #validate:
                    #header:
                        #xpath: id('titleIndex')
                        #matches: Foobar2
        # there could be more more static stuff after the ajax of course
        - static:
            - http://myhost.com/analytics.js

- Action:
    Name: XC-Homepage
    Request:
        Url: "https://www.xceptance.com/de/"
        Type: GET
        Encoded: false